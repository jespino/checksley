/*! checksley 2013-11-07*/
/*! Version: 0.4.0 */
/*! License: BSD */
!function(){var messages,validators;validators={minwords:function(val,nbWords){return val=val.replace(/(^\s*)|(\s*$)/gi,""),val=val.replace(/[ ]{2,}/gi," "),val=val.replace(/\n /,"\n"),val=val.split(" ").length,val>=nbWords},maxwords:function(val,nbWords){return val=val.replace(/(^\s*)|(\s*$)/gi,""),val=val.replace(/[ ]{2,}/gi," "),val=val.replace(/\n /,"\n"),val=val.split(" ").length,nbWords>=val},rangewords:function(val,obj){return val=val.replace(/(^\s*)|(\s*$)/gi,""),val=val.replace(/[ ]{2,}/gi," "),val=val.replace(/\n /,"\n"),val=val.split(" ").length,val>=obj[0]&&val<=obj[1]},greaterthan:function(val,elem,self){return self.options.validateIfUnchanged=!0,new Number(val)>new Number($(elem).val())},lessthan:function(val,elem,self){return self.options.validateIfUnchanged=!0,new Number(val)<new Number($(elem).val())},beforedate:function(val,elem){return Date.parse(val)<Date.parse($(elem).val())},afterdate:function(val,elem){return Date.parse($(elem).val())<Date.parse(val)},greaterthanvalue:function(val,min,self){return self.options.validateIfUnchanged=!0,new Number(val)>new Number(min)},lessthanvalue:function(val,max,self){return self.options.validateIfUnchanged=!0,new Number(val)<new Number(max)},beforedatevalue:function(val,date){return Date.parse(val)<Date.parse(date)},afterdatevalue:function(val,date){return Date.parse(date)<Date.parse(val)},inlist:function(val,list,self){var delimiter,listItems;return delimiter=self.element.data("inlistDelimiter")||",",listItems=(list+"").split(new RegExp("\\s*\\"+delimiter+"\\s*")),-1!==listItems.indexOf(val.trim())},luhn:function(val){var digit,key,sum,_i,_len,_ref;for(val=val.replace(/[ -]/g,""),sum=0,_ref=val.split("").reverse(),key=_i=0,_len=_ref.length;_len>_i;key=++_i)digit=_ref[key],digit=+digit,key%2?(digit*=2,sum+=10>digit?digit:digit-9):sum+=digit;return 0===sum%10},americandate:function(val){var day,month,monthLength,parts,year;return/^([01]?[0-9])[\.\/-]([0-3]?[0-9])[\.\/-]([0-9]{4}|[0-9]{2})$/.test(val)?(parts=val.split(/[.\/-]+/),day=parseInt(parts[1],10),month=parseInt(parts[0],10),year=parseInt(parts[2],10),0===year||0===month||month>12?!1:(monthLength=[31,28,31,30,31,30,31,31,30,31,30,31],(0===year%400||0!==year%100&&0===year%4)&&(monthLength[1]=29),day>0&&day<=monthLength[month-1])):!1}},messages={minwords:"This value should have %s words at least.",maxwords:"This value should have %s words maximum.",rangewords:"This value should have between %s and %s words.",greaterthan:"This value should be greater than %e.",lessthan:"This value should be less than %e.",beforedate:"This date should be before %e.",afterdate:"This date should be after %e.",greaterthanvalue:"This value should be greater than %s.",lessthanvalue:"This value should be less than %s.",beforedatevalue:"This date should be before %s.",afterdatevalue:"This date should be after %s.",inlist:"This value should be in the list %s.",luhn:"This value should pass the luhn test.",americandate:"This value should be a valid date (MM/DD/YYYY)."},this.checksley.updateValidators(validators),this.checksley.updateMessages("default",messages)}.call(this);
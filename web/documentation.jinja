{% extends "base.jinja" %}

{% block bodyid %}index{% endblock %}
{% block documentationactive %}class="active"{% endblock %}

{% block content %}
        <div class="row-fluid marketing">
            <h2>Warning: This documentation is based on Parsley.js documentation, need to be reviewed.</h2>
            <h2>Demonstration</h2>

                <a name="checksleydemoform"></a>
                <table id="demonstration-form" class="table table-striped table-bordered table-hover">
                    <thead>
                        <tr>
                            <th width="27%">Classy demo</th>
                            <th width="73%" class="not-for-mobile">HTML Code (yes, no JS !)</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <form id="demo-form">
                                    <label for="fullname">Full Name * :</label>
                                    <input type="text" id="fullname" name="fullname" data-required="true" />

                                    <label for="email">Email * :</label>
                                    <input type="text" id="email" name="email" data-type="email" data-trigger="change" data-required="true" />

                                    <label for="website">Website :</label>
                                    <input type="text" id="website" name="website" data-trigger="change" data-type="url" />

                                    <label for="message">Message (20 chars min, 200 max) :</label>
                                    <textarea id="message" name="message" data-trigger="keyup" data-rangelength="[20,200]"></textarea>

                                    <input type="hidden" name="superhidden" id="superhidden">
                                    <br/><span class="btn btn" id="demo-form-valid" onclick="javascript:$('#demo-form').checksley( 'validate' );"><i class="icon-ok"></i></span>
                                </form>
                                <small>Please, note that this demo form is not a perfect example of UX-awareness. The aim here is to show a quick overview of data-API and Checksley customizable behavior.</small>
                            </td>
                            <td class="not-for-mobile">
<pre><code>{% filter e %}<form id="demo-form">
    <label for="fullname">Full Name * :</label>
    <input type="text" id="fullname" name="fullname" data-required="true" />

    <label for="email">Email * :</label>
    <input type="text" id="email" name="email" data-trigger="change" data-required="true" data-type="email" />

    <label for="website">Website :</label>
    <input type="text" id="website" name="website" data-trigger="change" data-type="url" />

    <label for="message">Message (20 chars min, 200 max) :</label>
    <textarea id="message" name="message" data-trigger="keyup" data-rangelength="[20,200]"></textarea>
</form>{% endfilter %}</code></pre>
                            </td>
                        </tr>
                </table>

                <div class="alert alert-block alert-info">
                <span class="label label-important">Heads up!</span> <strong>Le #UX touch</strong>:
                <ul>
                    <li>
                        <strong>Min char validation</strong>: Checksley by default <strong>does not proceed with field validation when less than 3 chars have been input</strong>. Do not assault your users with error messages too soon! <i>(this behavior is configurable)</i>.
                    </li>
                    <li>
                        <strong>Quick error removal</strong>: when a field is detected and shown as invalid, further checks are done on each keypress to try to <strong>quickly remove error messages once the field is ok</strong>.
                    </li>
                    <li>
                        <strong>Control focusing on error</strong>: on form submission, the first error field is focused to <strong>allow the user to easily start fixing errors</strong>. <i>(this behavior is configurable)</i>
                    </li>
                </ul>
                </div>

                <hr>

            <a name="top"></a>
            <h2>Documentation</h2>

            <ol>
                <li><a href="#installation"><strong>Installation &amp; usage</strong>: one or two inclusions!</a></li>
                <li><a href="#checksleyform"><strong>Checksley Form</strong>: add some Checksley validation to your forms!</a></li>
                <li><a href="#checksleyfield"><strong>Checksley Field</strong>: customize each validated field validation behavior </a></li>
                <li>
                  <a href="#validators"><strong>Validators</strong>: learn the various validations you could do with Checksley</a>
                  <ol>
                      <li><a href="#basic-constraints">Basic constraints</a></li>
                      <li><a href="#type-constraints">Type constraints</a></li>
                      <li><a href="#extra-constraints">Extra constraints</a></li>
                  </ol>
                </li>
                <li>
                    <a href="#javascript"><strong>Javascript</strong>: yes, you still can do some javascript with Checksley. Intermediate level only!</a>
                    <ol>
                          <li><a href="#javascript-general">General</a></li>
                          <li><a href="#javascript-form">Form</a></li>
                          <li><a href="#javascript-fields">Fields</a></li>
                      </ol>
                </li>
                <li>
                    <a href="#checksleyclasses"><strong>Checksley CSS</strong>: last but not least, Checksley CSS classes</a>
                </li>
                <li>
                    <a href="#plugins-and-localization"><strong>Plugins &amp; Localization</strong>: extend Checksley messages, validators, templates and more!</a>
                </li>
            </ol>

            <hr>

            {% include "includes/installation.jinja" %}
            {% include "includes/form_section.jinja" %}
            {% include "includes/field_section.jinja" %}
            {% include "includes/builtin_validators.jinja" %}
            {% include "includes/javascript_section.jinja" %}
            {% include "includes/css_section.jinja" %}
            {% include "includes/plugins_and_l10n.jinja" %}

      <hr>

      <script type="text/javascript" src="bower_components/jquery/jquery.min.js"></script>
      <script type="text/javascript" src="bower_components/lodash/dist/lodash.min.js"></script>
      <script type="text/javascript" src="bower_components/checksley/checksley.js"></script>
      <script type="text/javascript" src="http://yandex.st/highlightjs/7.3/highlight.min.js"></script>
      <script type="text/javascript">
          try {
              hljs.initHighlightingOnLoad();
          } catch ( err ) {}

          $( '#demo-form' ).checksley( { listeners: {
              onFormSubmit: function ( isFormValid, event ) {
                  if ( isFormValid && !$( '#good-to-go').length ) {
                      $( '#demo-form-valid' ).after( '<span id="good-to-go" style="display:block;margin-top:5px;" class="alert alert-success">Yay, good to go!</span>' );
                      $( '#demo-form-valid' ).hide();
                      $( '#not-good-to-go' ).hide();
                  } else if ( !isFormValid && !$( '#not-good-to-go').length ) {
                      $( '#demo-form-valid' ).after( '<span id="not-good-to-go" style="display:block;margin-top:5px;" class="alert alert-error">Oops! Seems there are some errors..</span>' );
                  }
              },
              onFieldError: function ( field, constraint ) {
                  $( '#demo-form-valid' ).show();
                  $( '#good-to-go' ).remove();
              }
          } } );

          $( '#checksley-multiple' ).checksley( {
            validators: {
              multiple: function ( val, multiple ) {
                return val % multiple === 0;
              }
            }
            , messages: {
                multiple: "This value should be a multiple of %s"
              }
          } );
      </script>
{% endblock %}
